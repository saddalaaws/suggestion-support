# -*- coding: utf-8 -*-
#
"""Configuration file for the Sphinx documentation builder."""
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config
# pylint: disable=redefined-builtin,invalid-name

# -- Path setup --------------------------------------------------------------
import os
import shutil
import subprocess  # nosec
import sys
import time
from typing import Dict, Optional

LOCAL_PATH = os.path.dirname(__file__)
PACKAGES_PATH = os.path.join(LOCAL_PATH, '..', '..', 'src', 'packages')
sys.path.insert(0, os.path.abspath(PACKAGES_PATH))

# -- Project information -----------------------------------------------------


def get_version() -> str:
    """Get source code revision."""
    git_path = shutil.which('git')
    if git_path is None:
        raise RuntimeError('Unable to find git!')
    proc = subprocess.run(  # nosec
        [git_path, 'describe', '--tags'],
        check=False,
        capture_output=True)
    git_revision = proc.stdout.decode('ascii').strip()
    cb_revision = os.environ.get('CODEBUILD_RESOLVED_SOURCE_VERSION', '')
    return git_revision or cb_revision


def get_hash() -> str:
    """Get source code commit hash."""
    return get_version()


author = 'Merck'
project = 'Custom Data Processing'
title = f'{project} Documentation'
description = 'Project for the custom data processing (CDP) platform'
copyright = time.strftime(f'2021-%Y, {author}')  # noqa: A001
# The short X.Y version
version = time.strftime('%Y.%m')
# The full version, including tags
release = get_version()

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings.
extensions = [
    'recommonmark',
    'sphinx.ext.autodoc',
    'sphinx.ext.autosectionlabel',
    'sphinx.ext.extlinks',
    'sphinx.ext.graphviz',
    'sphinx.ext.inheritance_diagram',
    'sphinx.ext.intersphinx',
    'sphinx.ext.napoleon',
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
    'sphinx_diagrams',
    'sphinx_rtd_theme',
    'sphinxcontrib.confluencebuilder',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['templates']

# The suffix(es) of source filenames.
source_suffix = ['.rst', '.md']

# The master document for the table of contents.
master_doc = 'index'

# The language for content generated by Sphinx. Refer to documentation
# for a list of supported languages.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['hidden']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# -- Options for HTML output -------------------------------------------------

html_logo = 'static/logo_200px.jpg'

# The theme to use for HTML and HTML Help pages.
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
# html_sidebars = {}

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'CustomDataProcessingDoc'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    'papersize': 'a4paper',
    'pointsize': '12pt',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, document class.
latex_documents = [
    (master_doc, 'CustomDataProcessing.tex', title, author, 'manual'),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, 'customdataprocessing', title, [author], 1)]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  directory menu entry, description, category)
texinfo_documents = [
    (master_doc, 'CustomDataProcessing', title, author, 'CustomDataProcessing',
     description, 'Data Science'),
]

# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
epub_identifier = 'merck-ics-doc'
# A unique identification for the text.
epub_uid = get_hash()
# A list of files that should not be packed into the Epub file.
epub_exclude_files = ['search.html']


# -- Options for confluence output -------------------------------------------
def _get_confluence_server_cookies() -> Optional[Dict[str, str]]:
    """This parses a confluence server cookie in text file format.

    The text file can be retrieved via the Chrome plugin
    `Get Cookies.txt <https://chrome.google.com/webstore/detail/get-
    cookiestxt/bgaddhkoddajcdgocldbbfleckgcbcid>` while browsing
    confluence.
    """
    # The http library cookie class doesn't parse the whole cookie
    if os.path.exists('merckgroup.com_cookies.txt'):
        with open('merckgroup.com_cookies.txt', encoding='utf-8') as fp:
            result = {}
            for line in fp.readlines():
                if line.startswith('wiki.merckgroup.com'):
                    tmp = line.strip().split()
                    result[tmp[-2]] = tmp[-1]
            return result
    print('No confluence cookie available!')
    return None


confluence_server_url = 'https://wiki.merckgroup.com/confluence/'
confluence_space_key = 'BA'
confluence_parent_page = 'Platform Documentation'
confluence_purge = False
confluence_page_hierarchy = True
confluence_server_cookies = _get_confluence_server_cookies()
confluence_publish_dryrun = confluence_server_cookies is None
confluence_publish = confluence_server_cookies is not None

# -- Extension configuration -------------------------------------------------

# -- Options for TODO extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for ext links extension -----------------------------------------

extlinks = {
    'cldr': ('http://cldr.unicode.org/index/cldr-spec/%s', 'Unicode CLDR: %s'),
}

# -- Options for autosectionlabel extension ----------------------------------

autosectionlabel_prefix_document = False

# -- Options for intersphinx extension ---------------------------------------

intersphinx_mapping = {
    'babel': ('https://babel.pocoo.org/en/stable/', None),
    'matplotlib': ('https://matplotlib.org/stable/', None),
    'numpy': ('https://numpy.org/doc/stable/', None),
    'pandas': ('https://pandas.pydata.org/docs/', None),
    'python': ('https://docs.python.org/3', None),
    'scipy': ('https://docs.scipy.org/doc/scipy/', None),
    'sklearn': ('https://scikit-learn.org/stable/', None),
    'sphinx': ('https://www.sphinx-doc.org/en/master/', None),
}
